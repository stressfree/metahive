// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.triptech.metahive.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.triptech.metahive.model.Applicability;
import net.triptech.metahive.model.Category;
import net.triptech.metahive.model.CategoryDataOnDemand;
import net.triptech.metahive.model.DataType;
import net.triptech.metahive.model.Definition;
import net.triptech.metahive.model.DefinitionDataOnDemand;
import net.triptech.metahive.model.DefinitionType;
import net.triptech.metahive.model.KeyValueGenerator;
import net.triptech.metahive.model.UserRole;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DefinitionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DefinitionDataOnDemand: @Component;
    
    private Random DefinitionDataOnDemand.rnd = new SecureRandom();
    
    private List<Definition> DefinitionDataOnDemand.data;
    
    @Autowired
    private CategoryDataOnDemand DefinitionDataOnDemand.categoryDataOnDemand;
    
    public Definition DefinitionDataOnDemand.getNewTransientDefinition(int index) {
        Definition obj = new Definition();
        setApplicability(obj, index);
        setCalculation(obj, index);
        setCategory(obj, index);
        setDataType(obj, index);
        setDefinitionType(obj, index);
        setKeyValueAccess(obj, index);
        setKeyValueGenerator(obj, index);
        setName(obj, index);
        setSummaryDefinition(obj, index);
        return obj;
    }
    
    public void DefinitionDataOnDemand.setApplicability(Definition obj, int index) {
        Applicability applicability = Applicability.class.getEnumConstants()[0];
        obj.setApplicability(applicability);
    }
    
    public void DefinitionDataOnDemand.setCalculation(Definition obj, int index) {
        String calculation = "calculation_" + index;
        obj.setCalculation(calculation);
    }
    
    public void DefinitionDataOnDemand.setCategory(Definition obj, int index) {
        Category category = categoryDataOnDemand.getRandomCategory();
        obj.setCategory(category);
    }
    
    public void DefinitionDataOnDemand.setDataType(Definition obj, int index) {
        DataType dataType = DataType.class.getEnumConstants()[0];
        obj.setDataType(dataType);
    }
    
    public void DefinitionDataOnDemand.setDefinitionType(Definition obj, int index) {
        DefinitionType definitionType = DefinitionType.class.getEnumConstants()[0];
        obj.setDefinitionType(definitionType);
    }
    
    public void DefinitionDataOnDemand.setKeyValueAccess(Definition obj, int index) {
        UserRole keyValueAccess = UserRole.class.getEnumConstants()[0];
        obj.setKeyValueAccess(keyValueAccess);
    }
    
    public void DefinitionDataOnDemand.setKeyValueGenerator(Definition obj, int index) {
        KeyValueGenerator keyValueGenerator = KeyValueGenerator.class.getEnumConstants()[0];
        obj.setKeyValueGenerator(keyValueGenerator);
    }
    
    public void DefinitionDataOnDemand.setName(Definition obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = new Random().nextInt(10) + name.substring(1, 100);
        }
        obj.setName(name);
    }
    
    public void DefinitionDataOnDemand.setSummaryDefinition(Definition obj, int index) {
        Definition summaryDefinition = obj;
        obj.setSummaryDefinition(summaryDefinition);
    }
    
    public Definition DefinitionDataOnDemand.getSpecificDefinition(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Definition obj = data.get(index);
        Long id = obj.getId();
        return Definition.findDefinition(id);
    }
    
    public Definition DefinitionDataOnDemand.getRandomDefinition() {
        init();
        Definition obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Definition.findDefinition(id);
    }
    
    public boolean DefinitionDataOnDemand.modifyDefinition(Definition obj) {
        return false;
    }
    
    public void DefinitionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Definition.findDefinitionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Definition' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Definition>();
        for (int i = 0; i < 10; i++) {
            Definition obj = getNewTransientDefinition(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
